name: RDP

on:
  workflow_dispatch:
    inputs:
      # optional: bot c√≥ th·ªÉ g·ª≠i run_id, nh∆∞ng ch√∫ng ta d√πng github.run_number l√†m ch·ªâ ƒë·ªãnh ch√≠nh
      note:
        description: "Optional note from caller"
        required: false
        default: ""

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: ‚öôÔ∏è Configure Core RDP Settings
        shell: pwsh
        run: |
          Write-Host "Configuring Remote Desktop settings..."
          # Enable Remote Desktop and ensure RDP listening
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          # Optionally relax NLA if necessary
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          # Ensure firewall rule (remove previous then add)
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No previous rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

      - name: üë§ Create RDP user with secure password
        id: create_user
        shell: pwsh
        run: |
          Write-Host "Creating local user 'RDP' with random strong password..."
          Add-Type -AssemblyName System.Security
          $chars = (33..126) | ForEach-Object {[char]$_}
          # build a 16-char password with mixed chars
          $pwd = -join ((1..16) | ForEach-Object { $chars | Get-Random })
          $secure = ConvertTo-SecureString $pwd -AsPlainText -Force

          # Create user (if exists, remove then recreate)
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
            Remove-LocalUser -Name "RDP" -ErrorAction SilentlyContinue
          }
          New-LocalUser -Name "RDP" -Password $secure -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue

          # export password to env for later steps
          echo "RDP_PASSWORD=$pwd" >> $env:GITHUB_ENV
          Write-Host "User created."

      - name: üß© Install Tailscale (Windows)
        shell: pwsh
        run: |
          Write-Host "Downloading Tailscale installer..."
          $installer = "$env:TEMP\tailscale-installer.exe"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile $installer
          Write-Host "Installing Tailscale..."
          Start-Process -FilePath $installer -ArgumentList "/quiet" -Wait
          Remove-Item $installer -ErrorAction SilentlyContinue
          Write-Host "Tailscale installed."

      - name: üîë Start Tailscale and auth
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
            Write-Error "TAILSCALE_AUTH_KEY secret not set"
            exit 1
          }
          Write-Host "Bringing up Tailscale..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey="$env:TAILSCALE_AUTH_KEY" --hostname="gh-runner-${{ github.run_number }}" --accept-dns --accept-routes
          # Give tailscale a few seconds to populate interface
          Start-Sleep -Seconds 5

      - name: üîç Wait for Tailscale IPs (ipv4 + ipv6)
        id: get_ips
        shell: pwsh
        run: |
          Write-Host "Waiting for Tailscale IP(s) to appear..."
          $ipv4 = $null
          $ipv6 = $null
          $tries = 0
          while (($null -eq $ipv4 -or $null -eq $ipv6) -and $tries -lt 20) {
            # tailscale ip -4 may list one or multiple IPv4 addresses; pick first IPv4-like line
            try {
              $out4 = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
              $out6 = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -6 2>$null
            } catch {
              $out4 = $null; $out6 = $null
            }

            if ($out4) {
              $line4 = $out4 -split "`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -match '^\d{1,3}(\.\d{1,3}){3}$' } | Select-Object -First 1
              if ($line4) { $ipv4 = $line4 }
            }

            if ($out6) {
              $line6 = $out6 -split "`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -match '^[0-9a-fA-F:]+$' } | Select-Object -First 1
              if ($line6) { $ipv6 = $line6 }
            }

            if ($ipv4 -and $ipv6) { break }
            Start-Sleep -Seconds 3
            $tries++
          }

          if (-not $ipv4) {
            Write-Warning "IPv4 not found from tailscale ip output; trying to use tailscale status"
            $status = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null
            if ($status) {
              try {
                $json = $status | ConvertFrom-Json
                if ($json and $json.Self and $json.Self.TailscaleIPs) {
                  $ips = $json.Self.TailscaleIPs
                  # pick first IPv4 and IPv6 if present
                  foreach ($ip in $ips) {
                    if ($ip -match '^\d{1,3}(\.\d{1,3}){3}$' -and -not $ipv4) { $ipv4 = $ip }
                    if ($ip -match ':' -and -not $ipv6) { $ipv6 = $ip }
                  }
                }
              } catch { Write-Warning "Could not parse tailscale status JSON" }
            }
          }

          if (-not $ipv4 -and -not $ipv6) {
            Write-Error "Could not obtain tailscale IP addresses"
            exit 1
          }

          Write-Host "TAILSCALE_IPV4=$ipv4"
          Write-Host "TAILSCALE_IPV6=$ipv6"
          echo "TAILSCALE_IPV4=$ipv4" >> $env:GITHUB_ENV
          echo "TAILSCALE_IPV6=$ipv6" >> $env:GITHUB_ENV

      - name: ‚úÖ Verify RDP Accessibility on Tailscale IP
        shell: pwsh
        run: |
          $ip = $env:TAILSCALE_IPV4
          if (-not $ip) { Write-Warning "No IPv4 available; will skip TCP test." } else {
            Write-Host "Testing TCP 3389 on $ip"
            $t = Test-NetConnection -ComputerName $ip -Port 3389 -InformationLevel Quiet
            if (-not $t) {
              Write-Error "RDP port 3389 not reachable on $ip"
              exit 1
            }
            Write-Host "TCP connectivity successful!"
          }

      - name: üìù Export RDP Info to JSON (artifact)
        shell: pwsh
        run: |
          $out = @{
            run_number = $env:GITHUB_RUN_NUMBER
            tailscale_ipv4 = $env:TAILSCALE_IPV4
            tailscale_ipv6 = $env:TAILSCALE_IPV6
            username = "RDP"
            password = $env:RDP_PASSWORD
            created_at = (Get-Date).ToString("o")
            note = "${{ github.event.inputs.note }}"
          }
          $out | ConvertTo-Json -Depth 5 | Out-File -FilePath rdp_info.json -Encoding utf8
          Write-Host "---- rdp_info.json ----"
          Get-Content rdp_info.json
          Write-Host "-----------------------"

      - name: üì¶ Upload RDP Info Artifact (named by workflow run)
        uses: actions/upload-artifact@v4
        with:
          name: rdp_${{ github.run_number }}
          path: rdp_info.json
          retention-days: 1

      - name: ‚ôªÔ∏è Maintain Connection (loop)
        shell: pwsh
        run: |
          Write-Host "`n=== RDP READY ==="
          Write-Host "Address: $env:TAILSCALE_IPV4"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "==================`n"

          while ($true) {
              Write-Host "[$(Get-Date -Format o)] RDP Active - workflow will remain until manually cancelled"
              Start-Sleep -Seconds 300
          }